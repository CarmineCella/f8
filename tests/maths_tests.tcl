# --------------------------------
# The f8 (fate) scripting language
# --------------------------------
#
# Maths tests
#
# (c) www.carminecella.com
#

source "stdlib.tcl"

puts "--- single operations ---n"

test '(succ 1) '(2)
test '(succ -1) '(0)
test '(pred  3) '(2)
test '(pred -1) '(-2)
test '(quotient 21 5) '(4)
test '(quotient 12 3) '(4)
test '(mod 6 12) '(6)
test '(mod 12 12) '(0)
test '(mod -8 12) '(4)
test '(twice 3) '(6)
test '(square 3) '(9)
test '(square -4) '(16)
test '((mul-neg) '(2 8)) '(-16)
test '(round 0.3) '(0)
test '(round 0.7) '(1)
test '(round -0.3) '(0)
test '(round -0.7) '(-1)
test '(fac 5) '(120)
test '(fac 6) '(720)
test '(fib 10) '(55)

puts "\n--- sequences ---\n"

set seq '(0 1 2 3 4 5 6 7 8 9)
test '(map fib seq) '(1 1 1 2 3 5 8 13 21 34)
test '(ack 2 2)'(7)
test '(ack 2 3) '(9)
test '(ack 3 3) '(61)
test '(array2list (bpf 0 10 10)) '(0 1 2 3 4 5 6 7 8 9)
test '(array2list (zeros 10)) '(0 0 0 0 0 0 0 0 0 0)
test '(array2list (ones 10)) '(1 1 1 1 1 1 1 1 1 1) 
test '(diff seq) '(1 1 1 1 1 1 1 1 1)
test '(sign seq) '(1 1 1 1 1 1 1 1 1 1)
set seq2 (map neg seq)
test '(diff seq2) '(-1 -1 -1 -1 -1 -1 -1 -1 -1)
test '(sign seq2) '(1 -1 -1 -1 -1 -1 -1 -1 -1 -1)
test '(sum (array seq)) '(45)
test '(sum (array seq2)) '(-45)
test '(-> * seq) '(0)
test '(mean (array seq)) '(4.5)
test '(mean (array seq2)) '(-4.5)
test '(stddev (array seq)) '(3.0276503540974917)
test '(stddev (array seq2)) '(3.0276503540974917)
set e0 (array 0 1)
set e1 (array 1 0)
test '(dot e0 e1) '(0)
set sumlin (sum (bpf 0 100 100))
set dotlin (dot (bpf 0 100 100) (ones 100))
test '(eq dotlin sumlin) '(1)
test '(ortho e0 e1) '(1)
test '(array2list (standard (array seq))) '(-1.4863010829205867 -1.1560119533826787 -0.82572282384477047 -0.49543369430686224 -0.16514456476895409 0.16514456476895409 0.49543369430686224 0.82572282384477047 1.1560119533826787 1.4863010829205867)
test '(array2list (standard (array seq2))) '(1.4863010829205867 1.1560119533826787 0.82572282384477047 0.49543369430686224 0.16514456476895409 -0.16514456476895409 -0.49543369430686224 -0.82572282384477047 -1.1560119533826787 -1.4863010829205867)
test '(min (array seq)) '(0)
test '(max (array seq)) '(9)
test '(min (array seq2)) '(-9)
test '(max (array seq2)) '(0)
test '(array2list (normal (array seq))) '(0 0.1111111111111111 0.22222222222222221 0.33333333333333331 0.44444444444444442 0.55555555555555558 0.66666666666666663 0.77777777777777779 0.88888888888888884 1)

puts "\n--- dotted/applied operators ---\n"
test '(. + seq seq2) '(0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000)
test '(. - seq seq2) '(0.000000000000000 2.000000000000000 4.000000000000000 6.000000000000000 8.000000000000000 10.000000000000000 12.000000000000000 14.000000000000000 16.000000000000000 18.000000000000000)
test '(. * seq seq2) '(-0.000000000000000 -1.000000000000000 -4.000000000000000 -9.000000000000000 -16.000000000000000 -25.000000000000000 -36.000000000000000 -49.000000000000000 -64.000000000000000 -81.000000000000000)
test '(. / (cdr seq) (cdr seq2)) '(-1.000000000000000 -1.000000000000000 -1.000000000000000 -1.000000000000000 -1.000000000000000 -1.000000000000000 -1.000000000000000 -1.000000000000000 -1.000000000000000)
test '(. < seq seq2)  '(0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000)
test '(. > seq seq2) '(0.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000)
test '(. <= seq seq2) '(1.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000)
test '(. >= seq seq2) '(1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000)
# test '(-> sin seq) '(0.000000000000000 0.841470984807897 0.909297426825682 0.141120008059867 -0.756802495307928 -0.958924274663138 -0.279415498198926 0.656986598718789 0.989358246623382 0.412118485241757)
# test '(-> cos seq) '(1.000000000000000 0.540302305868140 -0.416146836547142 -0.989992496600445 -0.653643620863612 0.283662185463226 0.960170286650366 0.753902254343305 -0.145500033808614 -0.911130261884677)
test '(-> sqrt seq) '(0 1 1.4142135623730951 1.7320508075688772 2 2.2360679774997898 2.4494897427831779 2.6457513110645907 2.8284271247461903 3)
test '(-> log (cdr seq)) '(0 0.69314718055994529 1.0986122886681098 1.3862943611198906 1.6094379124341003 1.791759469228055 1.9459101490553132 2.0794415416798357 2.1972245773362196)
test '(-> abs seq2) '(0 1 2 3 4 5 6 7 8 9)
test '(-> exp seq) '(1 2.7182818284590451 7.3890560989306504 20.085536923187668 54.598150033144236 148.4131591025766 403.42879349273511 1096.6331584284585 2980.9579870417283 8103.0839275753842)
test '(-> exp seq2) '(1 0.36787944117144233 0.1353352832366127 0.049787068367863944 0.018315638888734179 0.006737946999085467 0.0024787521766663585 0.00091188196555451624 0.00033546262790251185 0.00012340980408667956)
test '(-> floor (-> sqrt seq)) '(0 1 1 1 2 2 2 2 2 3)

puts "\n--- builtin operators --- \n"

set seq16 (bpf 0 16 16)
test '(array2list (slice seq16 0 4)) '(0 1 2 3)
test '(array2list (slice seq16 1 15)) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
test '(array2list (round (ifft (fft seq16)))) '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
test '(array2list (round (conv seq16 seq16 1))) '(0.000000000000000 0.000000000000000 1.000000000000000 4.000000000000000 10.000000000000000 20.000000000000000 35.000000000000000 56.000000000000000 84.000000000000000 120.000000000000000 165.000000000000000 220.000000000000000 286.000000000000000 364.000000000000000 455.000000000000000 560.000000000000000 680.000000000000000 784.000000000000000 871.000000000000000 940.000000000000000 990.000000000000000 1020.000000000000000 1029.000000000000000 1016.000000000000000 980.000000000000000 920.000000000000000 835.000000000000000 724.000000000000000 586.000000000000000 420.000000000000000 225.000000000000000)
test '(array2list (+ seq16 seq16)) '(0.000000000000000 2.000000000000000 4.000000000000000 6.000000000000000 8.000000000000000 10.000000000000000 12.000000000000000 14.000000000000000 16.000000000000000 18.000000000000000 20.000000000000000 22.000000000000000 24.000000000000000 26.000000000000000 28.000000000000000 30.000000000000000)
test '(array2list (- seq16 seq16)) '(0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000 0.000000000000000)
test '(array2list (* seq16 seq16)) '(0.000000000000000 1.000000000000000 4.000000000000000 9.000000000000000 16.000000000000000 25.000000000000000 36.000000000000000 49.000000000000000 64.000000000000000 81.000000000000000 100.000000000000000 121.000000000000000 144.000000000000000 169.000000000000000 196.000000000000000 225.000000000000000)
test '(array2list (/ (slice seq16 1 15) (slice seq16 1 15))) '(1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000 1.000000000000000)
test '(array2list (+ seq16 10)) '(10.000000000000000 11.000000000000000 12.000000000000000 13.000000000000000 14.000000000000000 15.000000000000000 16.000000000000000 17.000000000000000 18.000000000000000 19.000000000000000 20.000000000000000 21.000000000000000 22.000000000000000 23.000000000000000 24.000000000000000 25.000000000000000)
test '(array2list (- seq16 10)) '(-10.000000000000000 -9.000000000000000 -8.000000000000000 -7.000000000000000 -6.000000000000000 -5.000000000000000 -4.000000000000000 -3.000000000000000 -2.000000000000000 -1.000000000000000 0.000000000000000 1.000000000000000 2.000000000000000 3.000000000000000 4.000000000000000 5.000000000000000)
test '(array2list (* seq16 10)) '(0.000000000000000 10.000000000000000 20.000000000000000 30.000000000000000 40.000000000000000 50.000000000000000 60.000000000000000 70.000000000000000 80.000000000000000 90.000000000000000 100.000000000000000 110.000000000000000 120.000000000000000 130.000000000000000 140.000000000000000 150.000000000000000)
test '(array2list (/ (slice seq16 1 15) 10)) '(0.100000000000000 0.200000000000000 0.300000000000000 0.400000000000000 0.500000000000000 0.600000000000000 0.700000000000000 0.800000000000000 0.900000000000000 1.000000000000000 1.100000000000000 1.200000000000000 1.300000000000000 1.400000000000000 1.500000000000000)
test '(array2list (+ 10 seq16)) '(10.000000000000000) 
test '(array2list (- 10 seq16)) '(10.000000000000000) 
test '(array2list (* 10 seq16)) '(0.000000000000000) 
test '(array2list (/ 10 (slice seq16 1 15))) '(10.000000000000000)
test '(array2list (< (array 1 2 3) (array 4 5 6))) '(1.000000000000000 1.000000000000000 1.000000000000000)
test '(array2list (> (array 1 2 3) (array 4 5 6))) '(0.000000000000000 0.000000000000000 0.000000000000000)
test '(array2list (>= (array 1 2 3) (array 1 2 3))) '(1.000000000000000 1.000000000000000 1.000000000000000)
test '(array2list (<= (array 1 2 3) (array 1 2 3))) '(1.000000000000000 1.000000000000000 1.000000000000000)
test '(array2list (< (array 1 2) (array 3 4) (array 0 0))) '(0.000000000000000 0.000000000000000)
test '(array2list (> (array 1 2) (array 3 4) (array 0 0))) '(0.000000000000000 0.000000000000000)
test '(array2list (<= (array 0 0) (array 3 4) (array 5 5))) '(1.000000000000000 1.000000000000000)
test '(array2list (>= (array 0 0) (array 3 4) (array 0 0))) '(0.000000000000000 0.000000000000000)

puts "\nALL TESTS PASSED\n\n"

# eof

